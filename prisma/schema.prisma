generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  password        String?
  role            String           @default("CLIENT")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  activityLogs    ActivityLog[]
  comments        Comment[]
  projects        Project[]
  serviceRequests ServiceRequest[]
}

model Service {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String?
  category        String
  pricingModel    String
  basePrice       Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  projects        Project[]
  serviceRequests ServiceRequest[]
}

model ServiceRequest {
  id           String   @id @default(cuid())
  userId       String
  serviceId    String?
  serviceType  String?
  title        String
  description  String
  status       String   @default("PENDING")
  budget       Int?
  timeline     String?
  requirements String?
  adminNotes   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project?
  service      Service? @relation(fields: [serviceId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model Project {
  id               String          @id @default(cuid())
  name             String
  description      String?
  status           String          @default("ACTIVE")
  userId           String
  serviceId        String?
  serviceRequestId String?         @unique
  creditBalance    Int             @default(30000)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  service          Service?        @relation(fields: [serviceId], references: [id])
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  projectTeams     ProjectTeam[]
  tasks            Task[]
}

model Task {
  id          String    @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      String    @default("TODO")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id           String        @id @default(cuid())
  name         String
  role         String
  bio          String?
  imageUrl     String?
  portfolio    String?
  skills       String?
  available    Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id           String     @id @default(cuid())
  projectId    String
  teamMemberId String
  role         String?
  hoursPerWeek Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  @@unique([projectId, teamMemberId])
}

model Testimonial {
  id          String   @id @default(cuid())
  clientName  String
  company     String?
  content     String
  rating      Int      @default(5)
  serviceType String?
  createdAt   DateTime @default(now())
}

model BlogPost {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  imageUrl    String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  userId    String
  metadata  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
