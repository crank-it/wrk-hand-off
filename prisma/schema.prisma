generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Simplified schema for initial development
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      String   @default("CLIENT") // MANAGER, STAFF, CLIENT
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projects      Project[]
  serviceRequests ServiceRequest[]
  comments      Comment[]
  activityLogs  ActivityLog[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  category    String   // WEBSITE, SEO, SOCIAL, DESIGN, CONTENT, EMAIL
  pricingModel String  // PROJECT, PER_MINUTE, RETAINER
  basePrice   Int?     // In cents
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  projects Project[]
  serviceRequests ServiceRequest[]
}

model ServiceRequest {
  id        String   @id @default(cuid())
  userId    String
  serviceId String?
  serviceType String?
  title     String
  description String
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  budget    Int?     // In cents
  timeline  String?
  requirements String?
  adminNotes String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User     @relation(fields: [userId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])
  project Project?
}

model Project {
  id              String   @id @default(cuid())
  name            String
  description     String?
  status          String   @default("ACTIVE") // ACTIVE, ON_HOLD, COMPLETE, CANCELLED
  userId          String
  serviceId       String?
  serviceRequestId String? @unique
  creditBalance   Int      @default(30000) // $300 in cents for trial
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user           User            @relation(fields: [userId], references: [id])
  service        Service?        @relation(fields: [serviceId], references: [id])
  serviceRequest ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  tasks          Task[]
  projectTeams   ProjectTeam[]
}

model Task {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      String   @default("TODO") // TODO, IN_PROGRESS, REVIEW, DONE
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  role        String
  bio         String?
  imageUrl    String?
  portfolio   String?  // JSON string of portfolio items
  skills      String?  // Comma-separated skills
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id           String   @id @default(cuid())
  projectId    String
  teamMemberId String
  role         String?  // Role in this specific project
  hoursPerWeek Int?     // Hours allocated per week
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, teamMemberId])
}

model Testimonial {
  id         String   @id @default(cuid())
  clientName String
  company    String?
  content    String
  rating     Int      @default(5)
  serviceType String?
  createdAt  DateTime @default(now())
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  imageUrl    String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String   // CREATED, UPDATED, DELETED, STATUS_CHANGED
  entity    String   // PROJECT, TASK, COMMENT, TEAM
  entityId  String
  userId    String
  metadata  String?  // JSON string with additional data
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}